def split_matrix(matrix):
    """
    Splits a matrix into four equal-sized submatrices.
    """
    size = len(matrix)
    mid = size // 2
    A = [row[:mid] for row in matrix[:mid]]
    B = [row[mid:] for row in matrix[:mid]]
    C = [row[:mid] for row in matrix[mid:]]
    D = [row[mid:] for row in matrix[mid:]]
    return A, B, C, D

def add_matrices(matrix1, matrix2):
    """
    Adds two matrices element-wise.
    """
    return [[matrix1[i][j] + matrix2[i][j] for j in range(len(matrix1[0]))] for i in range(len(matrix1))]

def subtract_matrices(matrix1, matrix2):
    """
    Subtracts two matrices element-wise.
    """
    return [[matrix1[i][j] - matrix2[i][j] for j in range(len(matrix1[0]))] for i in range(len(matrix1))]

def strassen(matrix1, matrix2):
    """
    Performs Strassen's matrix multiplication algorithm.
    """
    if len(matrix1) == 1:
        return [[matrix1[0][0] * matrix2[0][0]]]

    # Splitting matrices into submatrices
    A, B, C, D = split_matrix(matrix1)
    E, F, G, H = split_matrix(matrix2)

    # Calculating intermediate matrices
    P1 = strassen(A, subtract_matrices(F, H))
    P2 = strassen(add_matrices(A, B), H)
    P3 = strassen(add_matrices(C, D), E)
    P4 = strassen(D, subtract_matrices(G, E))
    P5 = strassen(add_matrices(A, D), add_matrices(E, H))
    P6 = strassen(subtract_matrices(B, D), add_matrices(G, H))
    P7 = strassen(subtract_matrices(A, C), add_matrices(E, F))

    # Calculating result matrices
    result_top_left = add_matrices(subtract_matrices(add_matrices(P5, P4), P2), P6)
    result_top_right = add_matrices(P1, P2)
    result_bottom_left = add_matrices(P3, P4)
    result_bottom_right = subtract_matrices(subtract_matrices(add_matrices(P1, P5), P3), P7)

    # Combining result matrices
    result_top = [result_top_left[i] + result_top_right[i] for i in range(len(result_top_left))]
    result_bottom = [result_bottom_left[i] + result_bottom_right[i] for i in range(len(result_bottom_left))]
    return result_top + result_bottom

# Example usage:
A = [[1, 2, 3, 4],
     [5, 6, 7, 8],
     [9, 10, 11, 12],
     [13, 14, 15, 16]]

B = [[17, 18, 19, 20],
     [21, 22, 23, 24],
     [25, 26, 27, 28],
     [29, 30, 31, 32]]

result = strassen(A, B)
for row in result:
    print(row)
-----------------------------------------------------------------------------------------------------------------------------------

def split_matrix(matrix):
    """
    Splits a matrix into four equal-sized submatrices.
    """
    size = len(matrix)
    mid = size // 2
    A = [row[:mid] for row in matrix[:mid]]
    B = [row[mid:] for row in matrix[:mid]]
    C = [row[:mid] for row in matrix[mid:]]
    D = [row[mid:] for row in matrix[mid:]]
    return A, B, C, D

def add_matrices(matrix1, matrix2):
    """
    Adds two matrices element-wise.
    """
    return [[matrix1[i][j] + matrix2[i][j] for j in range(len(matrix1[0]))] for i in range(len(matrix1))]

def subtract_matrices(matrix1, matrix2):
    """
    Subtracts two matrices element-wise.
    """
    return [[matrix1[i][j] - matrix2[i][j] for j in range(len(matrix1[0]))] for i in range(len(matrix1))]

def strassen(matrix1, matrix2):
    """
    Performs Strassen's matrix multiplication algorithm.
    """
    if len(matrix1) == 1:
        return [[matrix1[0][0] * matrix2[0][0]]]

    # Splitting matrices into submatrices
    A, B, C, D = split_matrix(matrix1)
    E, F, G, H = split_matrix(matrix2)

    # Calculating intermediate matrices
    P1 = strassen(A, subtract_matrices(F, H))
    P2 = strassen(add_matrices(A, B), H)
    P3 = strassen(add_matrices(C, D), E)
    P4 = strassen(D, subtract_matrices(G, E))
    P5 = strassen(add_matrices(A, D), add_matrices(E, H))
    P6 = strassen(subtract_matrices(B, D), add_matrices(G, H))
    P7 = strassen(subtract_matrices(A, C), add_matrices(E, F))

    # Calculating result matrices
    result_top_left = add_matrices(subtract_matrices(add_matrices(P5, P4), P2), P6)
    result_top_right = add_matrices(P1, P2)
    result_bottom_left = add_matrices(P3, P4)
    result_bottom_right = subtract_matrices(subtract_matrices(add_matrices(P1, P5), P3), P7)

    # Combining result matrices
    result_top = [result_top_left[i] + result_top_right[i] for i in range(len(result_top_left))]
    result_bottom = [result_bottom_left[i] + result_bottom_right[i] for i in range(len(result_bottom_left))]
    return result_top + result_bottom

# Example usage:
A = [[1, 2, 3, 4],
     [5, 6, 7, 8],
     [9, 10, 11, 12],
     [13, 14, 15, 16]]

B = [[17, 18, 19, 20],
     [21, 22, 23, 24],
     [25, 26, 27, 28],
     [29, 30, 31, 32]]

result = strassen(A, B)
for row in result:
    print(row)
